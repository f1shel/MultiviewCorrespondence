#version 460
#extension GL_EXT_debug_printf : enable
#extension GL_EXT_ray_tracing : require
#extension GL_EXT_scalar_block_layout : require
#extension GL_GOOGLE_include_directive : require
#extension GL_EXT_debug_printf : enable

#include "../shared/binding.h"
#include "../shared/camera.h"
#include "../shared/pushconstant.h"
#include "utils/math.glsl"
#include "utils/structs.glsl"

// clang-format off
layout(push_constant)                                 uniform _RtxState  { GpuPushConstantRaytrace pc; };
layout(set = RtAccel, binding = AccelTlas)            uniform accelerationStructureEXT tlas;
layout(set = RtOut,   binding = OutputStore, rgba32f) uniform image2D   images[NUM_OUTPUT_IMAGES];
layout(set = RtScene, binding = SceneCamera)          uniform _Camera   { GpuCamera cameraInfo; };
// clang-format on

layout(location = 0) rayPayloadEXT RayPayload payload;
layout(location = 1) rayPayloadEXT bool isShadowed;

void main() {
  // Set camera origin in world space
  uint rayFlags = gl_RayFlagsCullBackFacingTrianglesEXT;
  vec3 origin = transformPoint(cameraInfo.cameraToWorld, vec3(0.f));
  vec2 pixelCenter = vec2(gl_LaunchIDEXT.xy);
  vec3 rayOrigin, rayDir;

  // Disturb around the pixel center
  vec2 jitter = vec2(0.5);
  vec2 pixelRefView = pixelCenter + jitter;

  vec4 target;
  if (cameraInfo.type == CameraTypePerspective) {
    rayOrigin = origin;

    // Compute raster and camera sample positions
    vec3 pFilm = vec3(pixelRefView, 0.1f);
    vec3 pCamera = transformPoint(cameraInfo.rasterToCamera, pFilm);

    // Treat point as direction since camera origin is at (0,0,0)
    vec3 r = makeNormal(pCamera);

    // Transform ray to world space
    rayDir = transformDirection(cameraInfo.cameraToWorld, r);
  }

  // TODO: add opencv camera

  // Path trace
  payload.r = Ray(rayOrigin, rayDir);
  payload.hitSomething = false;

  // Check hit and call closest hit shader
  traceRayEXT(tlas, rayFlags, 0xFF, 0, 0, 0, payload.r.o, MINIMUM, payload.r.d,
              INFINITY, 0);

  // radiance.z denotes whether this texel stores information
  // of correspondence flow
  vec3 radiance = vec3(0, 0, 0);
  if (payload.hitSomething) {
    vec3 o = offsetPositionAlongNormal(payload.hitPos, payload.ffnormal);
    float dist = length(origin - o);
    vec3 d = makeNormal(origin - o);

    const uint rayFlags =
        gl_RayFlagsTerminateOnFirstHitEXT | gl_RayFlagsSkipClosestHitShaderEXT;
    float maxDist = dist - EPS;
    isShadowed = true;
    traceRayEXT(tlas, rayFlags, 0xFF, 0, 0, 1, o, 0.0, d, maxDist, 1);
    if (!isShadowed) {
      mat4 worldToRaster = cameraInfo.worldToRaster;
      vec3 pixelSrcView = transformPoint(worldToRaster, payload.hitPos);
      // pixelSrcView.xy /= pixelSrcView.z;

      vec2 flow = pixelSrcView.xy - pixelRefView;

      // debugPrintfEXT("ref=%v2f,src=%v2f | ref=%v3f,src=%v3f\n", pixelRefView,
      //                pixelSrcView.xy, -rayDir,
      //                makeNormal(origin - payload.hitPos));

      radiance = vec3(flow, 1.0);
    }
  }
  // Saving result
  // First frame, replace the value in the buffer
  imageStore(images[0], ivec2(gl_LaunchIDEXT.xy), vec4(radiance, 1.f));
}