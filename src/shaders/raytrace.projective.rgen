#version 460
#extension GL_EXT_debug_printf : enable
#extension GL_EXT_ray_tracing : require
#extension GL_EXT_scalar_block_layout : require
#extension GL_GOOGLE_include_directive : require
#extension GL_EXT_debug_printf : enable

#include "../shared/binding.h"
#include "../shared/camera.h"
#include "../shared/pushconstant.h"
#include "utils/math.glsl"
#include "utils/structs.glsl"

// clang-format off
layout(push_constant)                                 uniform _RtxState  { GpuPushConstantRaytrace pc; };
layout(set = RtAccel, binding = AccelTlas)            uniform accelerationStructureEXT tlas;
layout(set = RtOut,   binding = OutputStore, rgba32f) uniform image2D   images[NUM_OUTPUT_IMAGES];
layout(set = RtScene, binding = SceneCamera)          uniform _Camera   { GpuCamera cameraInfo; };
// clang-format on

layout(location = 0) rayPayloadEXT RayPayload payload;
layout(location = 1) rayPayloadEXT bool isShadowed;

void main() {
  // Initialize the seed for the random number
  payload.pRec.seed = xxhash32Seed(uvec3(gl_LaunchIDEXT.xy, pc.curFrame));

  // Set camera origin in world space
  uint rayFlags = gl_RayFlagsCullBackFacingTrianglesEXT;
  vec3 origin = transformPoint(cameraInfo.cameraToWorld, vec3(0.f));
  vec2 pixelCenter = vec2(gl_LaunchIDEXT.xy);
  vec3 rayOrigin, rayDir;

  // Multiple samples per frame and finally average them
  vec3 radiance = vec3(0.f);
  for (uint i = 0; i < pc.spp; ++i) {
    // Disturb around the pixel center
    vec2 jitter = pc.curFrame == 0 ? vec2(0.5) : vec2(rand2(payload.pRec.seed));
    vec2 pixel = pixelCenter + jitter;

    vec4 target;
    if (cameraInfo.type == CameraTypePerspective) {
      rayOrigin = origin;

      // Compute raster and camera sample positions
      vec3 pFilm = vec3(pixel, 0.f);
      vec3 pCamera = transformPoint(cameraInfo.rasterToCamera, pFilm);

      // Treat point as direction since camera origin is at (0,0,0)
      vec3 r = makeNormal(pCamera);

      // Modify ray for depth of field
      if (cameraInfo.aperture > 0.f) {
        // Sample point on lens
        vec2 uLens = rand2(payload.pRec.seed);
        vec2 pLens = cameraInfo.aperture * concentricSampleDisk(uLens);

        // Compute point on plane of focus
        float ft = cameraInfo.focalDistance / r.z;
        vec3 pFocus = ft * r;

        // Update ray for effect of lens
        vec3 o = vec3(pLens, 0.f);
        rayOrigin = transformPoint(cameraInfo.cameraToWorld, o);
        r = pFocus - o;
      }

      // Transform ray to world space
      rayDir = transformDirection(cameraInfo.cameraToWorld, r);
    }

    // TODO: add opencv camera

    // Path trace
    payload.pRec.ray = Ray(rayOrigin, rayDir);
    payload.pRec.stop = false;
    payload.pRec.radiance = vec3(0.0);
    payload.pRec.throughput = vec3(1.0);
    payload.bRec.flags = EBsdfNull;
    payload.mRec.albedo = vec3(0.0);
    payload.mRec.normal = vec3(0.0);

    for (payload.pRec.depth = 1; payload.pRec.depth <= pc.maxPathDepth;
         payload.pRec.depth++) {
      // Initialize direct light setting
      payload.dRec.skip = true;
      payload.dRec.radiance = vec3(0);

      // Check hit and call closest hit shader
      traceRayEXT(tlas, rayFlags, 0xFF, 0, 0, 0, payload.pRec.ray.o, MINIMUM,
                  payload.pRec.ray.d, INFINITY, 0);

#if USE_MIS
      if (!payload.dRec.skip) {
        // We are adding the contribution to the radiance only if the ray is not
        // occluded by an object. This is done here to minimize live state
        // across ray-trace calls. Shoot shadow ray up to the light(INFINITY ==
        // environement)
        const uint rayFlags = gl_RayFlagsTerminateOnFirstHitEXT |
                              gl_RayFlagsSkipClosestHitShaderEXT;
        float maxDist = payload.dRec.dist - EPS;
        isShadowed = true;
        traceRayEXT(tlas, rayFlags, 0xFF, 0, 0, 1, payload.dRec.ray.o, 0.0,
                    payload.dRec.ray.d, maxDist, 1);
        if (!isShadowed) {
          payload.pRec.radiance += payload.dRec.radiance;
        }
      }
#endif

      if (payload.pRec.stop) break;
    }

    radiance += payload.pRec.radiance;
  }

  radiance /= float(pc.spp);

  // Saving result
  if (pc.curFrame == 0) {
    // First frame, replace the value in the buffer
    imageStore(images[0], ivec2(gl_LaunchIDEXT.xy), vec4(radiance, 1.f));
    imageStore(images[1], ivec2(gl_LaunchIDEXT.xy),
               vec4(payload.mRec.albedo, 1.f));
    imageStore(images[2], ivec2(gl_LaunchIDEXT.xy),
               vec4(payload.mRec.normal, 1.f));
  } else {
    // Do accumulation over time
    float a = 1.0f / float(pc.curFrame + 1);
    vec3 old_color = imageLoad(images[0], ivec2(gl_LaunchIDEXT.xy)).xyz;
    imageStore(images[0], ivec2(gl_LaunchIDEXT.xy),
               vec4(mix(old_color, radiance, a), 1.f));
  }
}