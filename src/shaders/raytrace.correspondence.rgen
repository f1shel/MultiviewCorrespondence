#version 460
#extension GL_EXT_debug_printf : enable
#extension GL_EXT_ray_tracing : require
#extension GL_EXT_scalar_block_layout : require
#extension GL_GOOGLE_include_directive : require
#extension GL_EXT_debug_printf : enable

#include "../shared/binding.h"
#include "../shared/camera.h"
#include "../shared/pushconstant.h"
#include "utils/math.glsl"
#include "utils/structs.glsl"

// clang-format off
layout(push_constant)                                 uniform _RtxState  { GpuPushConstantRaytrace pc; };
layout(set = RtAccel, binding = AccelTlas)            uniform accelerationStructureEXT tlas;
layout(set = RtOut,   binding = OutputStore, rgba32f) uniform image2D   images[NUM_OUTPUT_IMAGES];
layout(set = RtScene, binding = SceneCamera)          uniform _Camera   { GpuCameraPair cameraPairInfo; };
// clang-format on

layout(location = 0) rayPayloadEXT RayPayload payload;
layout(location = 1) rayPayloadEXT bool isShadowed;

void printfMatrix(mat4 matrix) {
  mat4 rowMajor = transpose(matrix);
  debugPrintfEXT("\n   %v4f\n   %v4f\n   %v4f\n   %v4f\n", rowMajor[0],
                 rowMajor[1], rowMajor[2], rowMajor[3]);
}

void main() {
  GpuCamera camRef = cameraPairInfo.ref;
  GpuCamera camSrc = cameraPairInfo.src;

  // Set camera origin in world space
  uint rayFlags = gl_RayFlagsCullBackFacingTrianglesEXT;
  vec3 camRefOrigin = transformPoint(camRef.cameraToWorld, vec3(0.f));
  vec3 camSrcOrigin = transformPoint(camSrc.cameraToWorld, vec3(0.f));

  // Ray from reference camera
  vec3 rayOrigin, rayDir;

  // Disturb around the pixel center
  vec2 pixelRefView = vec2(gl_LaunchIDEXT.xy) + vec2(0.5);

  vec4 target;
  if (camRef.type == CameraTypePerspective) {
    rayOrigin = camRefOrigin;

    // Compute raster and camera sample positions
    vec3 pFilm = vec3(pixelRefView, 0.f);
    vec3 pCamera = transformPoint(camRef.rasterToCamera, pFilm);

    // Treat point as direction since camera origin is at (0,0,0)
    vec3 r = makeNormal(pCamera);

    // Transform ray to world space
    rayDir = transformDirection(camRef.cameraToWorld, r);
  } else if (camRef.type == CameraTypeOpencv) {
    rayOrigin = camRefOrigin;

    vec4 fxfycxcy = camRef.fxfycxcy;
    vec2 pRaster;
    pRaster.x = (pixelRefView.x - fxfycxcy.z) / fxfycxcy.x;
    pRaster.y = (pixelRefView.y - fxfycxcy.w) / fxfycxcy.y;

    vec3 r = vec3(pRaster, 1.f);

    // Transform ray to world space
    rayDir = transformDirection(camRef.cameraToWorld, r);
  }

  // Path trace
  payload.r = Ray(rayOrigin, rayDir);
  payload.hitSomething = false;

  // Check hit and call closest hit shader
  traceRayEXT(tlas, rayFlags, 0xFF, 0, 0, 0, payload.r.o, MINIMUM, payload.r.d,
              INFINITY, 0);

  // radiance.z denotes whether this texel stores information
  // of correspondence flow
  vec3 radiance = vec3(0, 0, 0);
  if (payload.hitSomething) {
    vec3 refHit = payload.hitPos;
    vec3 o = offsetPositionAlongNormal(refHit, payload.ffnormal);
    float dist = length(camSrcOrigin - o);
    vec3 d = makeNormal(camSrcOrigin - o);

    const uint shadowRayFlags =
        gl_RayFlagsTerminateOnFirstHitEXT | gl_RayFlagsSkipClosestHitShaderEXT;
    float maxDist = dist - EPS;
    isShadowed = true;
    traceRayEXT(tlas, shadowRayFlags, 0xFF, 0, 0, 1, o, 0.0, d, maxDist, 1);
    if (!isShadowed) {
      vec3 pixelSrcView;

      if (camSrc.type == CameraTypePerspective) {
        pixelSrcView = transformPoint(camSrc.worldToRaster, refHit);
      } else if (camSrc.type == CameraTypeOpencv) {
        vec4 fxfycxcy = camSrc.fxfycxcy;
        vec3 hitInCameraSpace = transformPoint(camSrc.worldToCamera, refHit);
        hitInCameraSpace.xy /= hitInCameraSpace.z;
        pixelSrcView.x = fxfycxcy.z + fxfycxcy.x * hitInCameraSpace.x;
        pixelSrcView.y = fxfycxcy.w + fxfycxcy.y * hitInCameraSpace.y;
        pixelSrcView.z = 1.0;
      }

      vec2 flow = pixelSrcView.xy - pixelRefView;

      radiance = vec3(flow, 1.0);
    }
  }
  // Saving result
  // First frame, replace the value in the buffer
  imageStore(images[0], ivec2(gl_LaunchIDEXT.xy), vec4(radiance, 1.f));
}